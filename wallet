import tkinter as tk
from tkinter import *
from web3 import Web3

master = tk.Tk()
master.geometry("1269x1269")
master.title("Native Ethereum Wallet")
master.resizable(True, True)
master.config(bg="white")
text_area = tk.Text(font="Times 13 bold")
answer = ("Welcome to your own Ethereum wallet!")
text_area.insert(tk.END, answer)
text_area.place(x=560, y=69)
text_area.config(relief=FLAT, bg="white", fg="black")

def ethTransaction():
   global entry
   key_var=key_entry.get()
   from_var=Web3.toChecksumAddress(from_entry.get())
   to_var=Web3.toChecksumAddress(from_entry.get())
   amount_var=amount_entry.get()
   web3 = Web3(Web3.HTTPProvider('INSERT YOUR INFURA OR OTHER RPC LINK HERE'))
   print(from_var)
   print(to_var)
   nonce = web3.eth.getTransactionCount(from_var)
   gasPrice = web3.toWei('25', 'gwei')
   value = web3.toWei({amount_var}, 'ether')
   tx = {
      'nonce': nonce,
      'to': to_var,
      'value': value,
      'gas': 250000,
      'gasPrice': gasPrice
   }
   signed_tx = web3.eth.account.sign_transaction(tx, key_var)
   tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
   print(web3.toHex(tx_hash))
   text_area = tk.Text()
   answer = (f"Your completed transaction hash is: {web3.toHex(tx_hash)}")
   text_area.insert(tk.END, answer)
   text_area.place(x=560, y=69)
   text_area.config(relief=FLAT, bg="white", fg="black", font="Times 13 bold")
   with open(f"transactions.txt", "a") as p:
      p.writelines(web3.toHex(tx_hash))


def generateEthPair():
   w3 = Web3()
   acct = w3.eth.account.create()
   text_area = tk.Text()
   answer = (f"Your newly requested Ethereum address is:\n\n{acct.address}\n\nYour newly requested private key is:\n\n{acct.key.hex()}")
   text_area.insert(tk.END, answer)
   text_area.place(x=560, y=69)
   text_area.config(relief=FLAT, bg="white", fg="black", font="Times 13 bold")
   print(acct.address)
   print(acct.key.hex())
   with open(f"{acct.address}.txt", "a") as k:
      k.writelines(f"{acct.address}\n")
      k.writelines(f"{acct.key.hex()}\n")

def getEth():
   global entry
   w3 = Web3()
   private_key = keyImport_entry.get()
   acct = w3.eth.account.from_key(private_key)
   text_area = tk.Text()
   answer = (f"Your newly imported Ethereum address is:\n\n{acct.address}\n\nYour imported private key is:\n\n{private_key}")
   text_area.insert(tk.END, answer)
   text_area.place(x=560, y=69)
   text_area.config(relief=FLAT, bg="white", fg="black", font="Times 13 bold")
   with open(f"{acct.address}.txt", "a") as p:
      p.writelines(acct.address)
      p.writelines(private_key)
      with open("KeyDump.txt", "r") as q:
         for line in p and q:
            if line:
               text_area = tk.Text()
               answer = (f"The private key you have entered has been identified by our KeyDump protocol as having been potentially compromised. We recommend generating a new key pair and discontinuing use of the entered credentials.")
               text_area.insert(tk.END, answer)
               text_area.place(x=560, y=69)
               text_area.config(relief=FLAT, bg="white", fg="black", font="Times 13 bold")
      master.mainloop()

def ethBalance():
   global entry
   infura_url = "https://mainnet.infura.io/v3/1bf2488d18014c33bee4859aa57be893"
   web3 = Web3(Web3.HTTPProvider(infura_url))
   bal_var = Web3.toChecksumAddress(bal_entry.get())
   balance = web3.eth.getBalance(bal_var) * 0.000000000000000001
   answer = (f"The requested address balance is {balance} ETH.")
   text_area = tk.Text()
   text_area.insert(tk.END, answer)
   text_area.place(x=560, y=69)
   text_area.config(relief=FLAT, bg="white", fg="black", font="Times 13 bold")
   print(web3.fromWei(balance, "ether"))

key_label = Label(master, text="Enter Private Key         ", font=("Times 13 bold"), bg="white", fg="black")
from_label = Label(master, text="Enter Your Address      ", font=("Times 13 bold"), bg="white", fg="black")
to_label = Label(master, text="Recipient Address        ", font=("Times 13 bold"), bg="white", fg="black")
header_label = Label(master, text="Send Ethereum      ", font=("Times 16 bold"), bg="white", fg="black")
amount_label =Label(master, text="Enter ETH Amount      ", font=("Times 13 bold"), bg="white", fg="black")
key_entry = tk.Entry(master, font=('Times 13 bold'))
from_entry=tk.Entry(master, font=('Times 13 bold'))
to_entry=tk.Entry(master, font=('Times 13 bold'))
amount_entry=tk.Entry(master, font=('Times 13 bold'))
key_var=key_entry.get()
from_var=from_entry.get()
to_var=to_entry.get()
amount_entry=amount_entry.get()
key_entry = tk.Entry(master, textvariable=key_entry, font=('Times 13 bold'))
from_entry = tk.Entry(master, textvariable=from_entry, font=('Times 13 bold'))
to_entry = tk.Entry(master, textvariable=to_entry, font=('Times 13 bold'))
amount_entry = tk.Entry(master, textvariable=amount_entry, font=('Times 13 bold'))
header_label.grid(row=0, column=0)
spacer4_label = Label(master, text="New ETH Pair  ", font=("Times 16 bold"), bg="white", fg="white")
spacer4_label.grid(row=1,column=0)
key_label.grid(row=2,column=0)
key_entry.grid(row=2,column=1)
from_label.grid(row=3,column=0)
from_entry.grid(row=3,column=1)
to_label.grid(row=4,column=0)
to_entry.grid(row=4,column=1)
amount_label.grid(row=5, column=0)
amount_entry.grid(row=5, column=1)
spacer4_label = Label(master, text="New ETH Pair  ", font=("Times 16 bold"), bg="white", fg="white")
spacer4_label.grid(row=6,column=0)
send_btn=tk.Button(master, text=" Send ETH Transaction", font=("Times 13"), command=ethTransaction)
send_btn.grid(row=7,column=0)
send_btn.config(bg="black", fg="white")
spacer_label = Label(master, text="New ETH Pair  ", font=("Times 16 bold"), bg="white", fg="white")
spacer_label.grid(row=8,column=0)
new_label = Label(master, text="Receive ETH       ", font=("Times 16 bold"), bg="white", fg="black")
new_label.grid(row=9,column=0)
spacer5_label = Label(master, text="New ETH Pair ", font=("Times 16 bold"), bg="white", fg="white")
spacer5_label.grid(row=10,column=0)
gen_btn=tk.Button(master, text = 'New Reciever Address', font=("Times 13"), command=generateEthPair)
gen_btn.grid(row=11,column=0)
gen_btn.config(bg="black", fg="white")
spacer2_label = Label(master, text=" ", font=("Times 16 bold"), bg="white", fg="white")
spacer2_label.grid(row=12,column=0)
import_label = Label(master, text="Back-Up Key         ", font=("Times 16 bold"), bg="white", fg="black")
import_label.grid(row=13,column=0)
keyImport_entry = tk.Entry(master, font=('Times 13 bold'))
keyImport_entry.grid(row=15,column=1)
spacer6_label = Label(master, text="  ", font=("Times 16 bold"), bg="white", fg="white")
spacer6_label.grid(row=14,column=0)
key2_label = Label(master, text="Enter Private Key          ", font=("Times 12 bold"), bg="white", fg="black")
key2_label.grid(row=15, column=0)
spacer7_label = Label(master, text="  ", font=("Times 16 bold"), bg="white", fg="white")
spacer7_label.grid(row=16,column=0)
bckup_btn=tk.Button(master, text = '   Import Private Key   ', font=("Times 13"), command=getEth)
bckup_btn.grid(row=17,column=0)
bckup_btn.config(bg="black", fg="white")
spacer8_label = Label(master, text="  ", font=("Courier 16 bold"), bg="white", fg="white")
spacer8_label.grid(row=18,column=0)
bal_label = Label(master, text="ETH Balance         ", font=("Times 16 bold"), bg="white", fg="black")
bal2_label = Label(master, text="ETH Address                ", font=("Times 13 bold"), bg="white", fg="black")
bal_entry=tk.Entry(master, font=('Times 13 bold'))
spacer9_label = Label(master, text="  ", font=("Courier 16 bold"), bg="white", fg="white")
spacer9_label.grid(row=20,column=0)
bal_label.grid(row=19, column=0)
bal2_label.grid(row=21, column=0)
bal_entry.grid(row=21, column=1)
spacer10_label = Label(master, text="  ", font=("Courier 16 bold"), bg="white", fg="white")
spacer10_label.grid(row=22,column=0)
bal_btn=tk.Button(master, text = '        Call Balance         ', font="Times 13", command=ethBalance)
bal_btn.grid(row=23,column=0)
bal_btn.config(bg="black", fg="white")
outputspacer_label = Label(master, text="      l                                        ", font=("Times 13 bold"), bg="white", fg="white")
outputspacer_label.grid(row=0,column=3)
output_label = Label(master, text="Output:", font=("Times 20 bold"), bg="white", fg="black")
output_label.grid(row=0,column=5)

master.mainloop()
